"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelName = exports.allure = void 0;
const crypto_1 = require("crypto");
const test_1 = __importDefault(require("@playwright/test"));
const allure_js_commons_1 = require("allure-js-commons");
const internal_1 = require("allure-js-commons/internal");
class allure {
    static async logStep(name) {
        await this.step(name, async () => { });
    }
    static step(name, body) {
        return test_1.default.step(name, body);
    }
    static async attachment(name, content, options) {
        const stepName = `allureattach_${(0, crypto_1.randomUUID)()}_${name}`;
        const contentType = typeof options === "string" ? options : options.contentType;
        await this.step(stepName, async () => {
            await test_1.default.info().attach(stepName, {
                body: content,
                contentType,
            });
        });
    }
    static async addMetadataAttachment(metadata) {
        await test_1.default.info().attach("allure-metadata.json", {
            contentType: internal_1.ALLURE_METADATA_CONTENT_TYPE,
            body: Buffer.from(JSON.stringify(metadata), "utf8"),
        });
    }
    static async label(label, value) {
        await this.addMetadataAttachment({
            labels: [{ name: label, value }],
        });
    }
    static labels(...values) {
        values.forEach(({ name, value }) => this.label(name, value));
    }
    static async description(value) {
        await this.addMetadataAttachment({
            description: value,
        });
    }
    static async link(url, name, type) {
        await this.addMetadataAttachment({
            links: [{ url, name, type }],
        });
    }
    static links(...values) {
        values.forEach(({ url, name, type }) => this.link(url, name, type));
    }
    static async id(id) {
        await this.label(allure_js_commons_1.LabelName.ALLURE_ID, id);
    }
    static async epic(epic) {
        await this.label(allure_js_commons_1.LabelName.EPIC, epic);
    }
    static async feature(epic) {
        await this.label(allure_js_commons_1.LabelName.FEATURE, epic);
    }
    static async story(story) {
        await this.label(allure_js_commons_1.LabelName.STORY, story);
    }
    static async suite(name) {
        await this.label(allure_js_commons_1.LabelName.SUITE, name);
    }
    static async parentSuite(name) {
        await this.label(allure_js_commons_1.LabelName.PARENT_SUITE, name);
    }
    static async layer(layerName) {
        await this.label(allure_js_commons_1.LabelName.LAYER, layerName);
    }
    static async subSuite(name) {
        await this.label(allure_js_commons_1.LabelName.SUB_SUITE, name);
    }
    static async owner(owner) {
        await this.label(allure_js_commons_1.LabelName.OWNER, owner);
    }
    static async severity(severity) {
        await this.label(allure_js_commons_1.LabelName.SEVERITY, severity);
    }
    static async tag(tag) {
        await this.label(allure_js_commons_1.LabelName.TAG, tag);
    }
    static async tags(...values) {
        await Promise.allSettled(values.map(async (value) => await this.tag(value)));
    }
    static async issue(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.ISSUE);
    }
    static async tms(name, url) {
        await this.link(url, name, allure_js_commons_1.LinkType.TMS);
    }
    static async parameter(name, value, options) {
        await this.addMetadataAttachment({
            parameter: [
                Object.assign({ name,
                    value }, options),
            ],
        });
    }
    static async addParameter(name, value, options) {
        await this.parameter(name, value, options);
    }
}
exports.allure = allure;
var allure_js_commons_2 = require("allure-js-commons");
Object.defineProperty(exports, "LabelName", { enumerable: true, get: function () { return allure_js_commons_2.LabelName; } });
//# sourceMappingURL=helpers.js.map